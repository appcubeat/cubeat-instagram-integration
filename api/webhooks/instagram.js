// api/webhooks/instagram.js

export default async function handler(req, res) {
  // 1) –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  if (req.method === 'GET') {
    const mode      = req.query['hub.mode'];
    const token     = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];

    if (mode === 'subscribe' && token === process.env.INSTAGRAM_VERIFY_TOKEN) {
      console.log('‚úÖ Verification success:', challenge);
      return res.status(200).send(challenge);
    } else {
      console.warn('‚ùå Verification failed:', req.url);
      return res.status(403).send('Forbidden');
    }
  }

  // 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö webhook-—Å–æ–±—ã—Ç–∏–π
  if (req.method === 'POST') {
    try {
      console.log('INCOMING WEBHOOK:', JSON.stringify(req.body));

      // –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
      const entry = req.body.entry?.[0];
      const change = entry?.changes?.[0];
      const value = change?.value;

      const instagram_user_id    = value?.sender?.id;
      const client_id            = value?.recipient?.id;
      const instagram_message_id = value?.message?.mid;
      const message_text         = value?.message?.text;
      const timestamp            = value?.timestamp?.toString(); // string –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Base44

      if (!instagram_user_id || !client_id || !instagram_message_id) {
        console.error('üî¥ Missing fields in webhook payload', value);
        return res.status(400).send('Bad Request');
      }

      const chatMessage = {
        client_id,
        instagram_user_id,
        instagram_message_id,
        direction: 'incoming',
        message_text,
        timestamp
      };

      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –≤ Base44 REST API
      const resp = await fetch(
        `${process.env.BASE44_API_URL}/entities/ChatMessage`,
        {
          method: 'POST',
          headers: {
            'api_key': process.env.BASE44_API_TOKEN,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(chatMessage)
        }
      );

      if (!resp.ok) {
        const err = await resp.text();
        console.error('‚ùå Base44 returned error:', resp.status, err);
        return res.status(500).send('Error forwarding to Base44');
      }

      const saved = await resp.json();
      console.log('‚úÖ Saved ChatMessage to Base44:', saved);

      // Facebook/Instagram —Ç—Ä–µ–±—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π 200
      return res.status(200).send('EVENT_RECEIVED');
    } catch (e) {
      console.error('‚ùå Error in handler:', e);
      return res.status(500).send('Internal Server Error');
    }
  }

  // –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
  return res.status(405).send('Method Not Allowed');
}
